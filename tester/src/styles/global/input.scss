////
/// @group Inputs/forms
////

$input-height: button-size(default); // ! Same as buttons

/// Input placeholder mixin
/// @param {Color} $Color [color(headline, default)] - color, optional.
/// @param {Color} $FontWeight [type(input, weight)] - color, optional.
@mixin input-placeholders(
  $Color: color(text, default),
  $FontWeight: type(input, weight),
) {
  &::-webkit-input-placeholder {
    color: $Color;
    font-weight: $FontWeight;
  } // Default

  &:-moz-placeholder {
    color: $Color;
    font-weight: $FontWeight;
  } // Firefox 18-

  &::-moz-placeholder {
    color: $Color;
    font-weight: $FontWeight;
  } // Firefox 19+
  
  &:-ms-input-placeholder { // IE
    color: $Color;
    font-weight: $FontWeight;
  }
}

/// Input base mixin. Can be used as standalone.
@mixin input-base() {
  width: 100%;
  height: $input-height;
  padding: rem(15);
  background: #fff;
  border: rem(1) solid color(border, default);
  border-radius: radius(default);
  font-size: type(input, size);
  line-height: type(input, lineHeight);
  font-weight: type(input, fontWeight);
  text-align: left;
  color: color(headline, default);
  -webkit-appearance: none;
  appearance: none;

  transition: padding .2s ease-in-out, border-color .4s ease-in-out;

  @include input-placeholders();
}

/// Select styles
select {
  @include input-base();
  cursor: pointer;
  padding-right: rem(40);
}

.input-group__input-wrap {
  position: relative;
}

/// Input styles
input[type="text"],
input[type="password"],
input[type="email"],
input[type="number"],
input[type="tel"],
textarea {
  @include input-base();
}

textarea {
  resize: vertical;
  height: auto;
  min-height: rem(300);
}

/// Number inputs
input[type='number'] {
  &::-webkit-inner-spin-button,
  &::-webkit-outer-spin-button {
    -webkit-appearance: none;
    appearance: none;
    margin: 0;
  }
}


/// Label
label {
  display: block;
  cursor: pointer;
}
.label {
  font-size: type(label, size);
  font-weight: type(label, weight);
  line-height: type(label, lineHeight);
  text-transform: type(label, textTransform);
  margin-bottom: gutter(s);

  // This class is used on the label when the design doesn't include a label (it is necessary for accessibility)
  &--a11y {
    font-size: 0;
    position: absolute;
    top: 0;
    left: -9999;
  }

  // ... spacing styles for labels here
}

/// Input icon. Requires a wrapping element with class .input-group__input-wrap
.input-group__icon {
  position: absolute;
  top: 50%;
  right: rem(17); 
  width: rem(20);
  height: rem(20);
  transform: translateY(-50%);
  pointer-events: none;

  svg path {
    fill: color(text, default);
  }
}

input {
  padding-right: calc(#{rem(20)} + #{rem(15)} + #{rem(15)});
  
  &[readonly] {
    background: #fff;
    cursor: pointer;
  }
}

/// Input group.

.input-group {
  position: relative;
  
  .input-group__error {
    color: color(error);
    margin-top: rem(10);
  }
  
  .input-group__wrap {
    position: relative;
    
    &:after {
      position: absolute;
      top: 50%;
      right: rem(16);    
    }
  }

  .input-group__input {
    &[disabled],
    &[readonly] {
      color: color(text, default);
    }    
  }

  &:not(.input-group--error) {
    // background: deeppink;
    .input-group__input {
      &[disabled],
      &[readonly] {
        background: color(disabled);
        border-color: color(border, default);
        cursor: not-allowed;
      }
    }

    &:hover {
      .input-group__input {
        &:not([disabled], [readonly]) {
          border-color: color(border, default);
        }
      }
    }
  }

  &.input-group--error {
    .input-group__error {
      display: block !important;
    }

    .input-group__icon svg path {
      fill: color(error);
    }

    .input-group__input {
        &:not([disabled], [readonly]) {
        border-color: color(error);
        color: color(error);
        
        @include input-placeholders(
          $Color: color(error),
        )
      }
      
      .input-group__error {
        display: block !important;
      }
    }
  }
}

.input-group--select {
  .input-group__wrap {
    &:after {
      content: url('data:image/svg+xml;base64, PHN2ZyB3aWR0aD0iMTQiIGhlaWdodD0iOCIgdmlld0JveD0iMCAwIDE0IDgiIGZpbGw9Im5vbmUiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+DQo8cGF0aCBmaWxsLXJ1bGU9ImV2ZW5vZGQiIGNsaXAtcnVsZT0iZXZlbm9kZCIgZD0iTTAuNjQ2NDQ3IDAuNjQ2NDQ3QzAuODQxNzA5IDAuNDUxMTg0IDEuMTU4MjkgMC40NTExODQgMS4zNTM1NSAwLjY0NjQ0N0w3IDYuMjkyODlMMTIuNjQ2NCAwLjY0NjQ0N0MxMi44NDE3IDAuNDUxMTg0IDEzLjE1ODMgMC40NTExODQgMTMuMzUzNiAwLjY0NjQ0N0MxMy41NDg4IDAuODQxNzA5IDEzLjU0ODggMS4xNTgyOSAxMy4zNTM2IDEuMzUzNTVMNyA3LjcwNzExTDAuNjQ2NDQ3IDEuMzUzNTVDMC40NTExODQgMS4xNTgyOSAwLjQ1MTE4NCAwLjg0MTcwOSAwLjY0NjQ0NyAwLjY0NjQ0N1oiIGZpbGw9ImJsYWNrIiAvPg0KPC9zdmc+');
      position: absolute;
      top: 50%;
      right: rem(16);
      transform: translateY(-50%);
      font-size: rem(12);
      pointer-events: none;
    }
  }
}


// Pretty check (checkbox & radio).
$pretty-check-outer: rem(30);
$pretty-check-inner: calc(#{$pretty-check-outer} - #{rem(10)});

/// Pretty check styles (checkbox & radio).
.pretty-check {
  position: relative;

  input {
    position: absolute;
    top: 0;
    left: rem(-9999);
  }

  input + label {
    position: relative;
    font-size: type(label, size);
    font-weight: type(label, weight);
    line-height: type(label, lineHeight);
    text-transform: type(label, textTransform);
    padding-left: calc(#{$pretty-check-outer} + #{rem(15)});
    min-height: $pretty-check-outer;
    display: flex;
    flex-direction: column;
    justify-content: center;
    cursor: pointer;

    &:before,
    &:after {
      content: '';
      position: absolute;
    }

    &:before {
      top: 0;
      left: 0;
      border: rem(1) solid color(border, default);
      width: $pretty-check-outer;
      height: $pretty-check-outer;
      background: #fff;
      transition: border-color .4s ease-in-out, background .3s ease-in-out;
    }

    &:after {
      left: rem(5);
      top: rem(5);
      width: $pretty-check-inner;
      height: $pretty-check-inner;
      transform: scale(0);
      transition: transform .4s ease-in-out;
    }

    &:hover {
      &:before {
        border-color: color(border, default);
      }
    }
  }

  input {
    &[disabled] {
      &+label {
        cursor: not-allowed;
        color: color(text, default);

        &:before {
          border-color: color(border, default);
          background: color(disabled);
        }
      }
    }
  }

  
  input:checked + label {
    &:before {
      border-color: color(primary, default);
    }
    &:after {
      transform: scale(1);
    }
  }

  [type="checkbox"]:checked + label {
    &:before {
      background: color(primary, default);
    }
  }

  [type="checkbox"] + label {
    &:before,
    &:after {
      border-radius: radius(default);
    }

    &:after {
      content: url('data:image/svg+xml;base64, PHN2ZyB3aWR0aD0iMTgiIGhlaWdodD0iMTQiIHZpZXdCb3g9IjAgMCAxOCAxNCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTYuMDAwMTYgMTEuMTcwMUwxLjgzMDE2IDcuMDAwMDlMMC40MTAxNTYgOC40MTAwOUw2LjAwMDE2IDE0LjAwMDFMMTguMDAwMiAyLjAwMDA5TDE2LjU5MDIgMC41OTAwODhMNi4wMDAxNiAxMS4xNzAxWiIgZmlsbD0id2hpdGUiLz4KPC9zdmc+Cg==');
    }
  }
  [type="radio"] + label {
    &:before,
    &:after {
      border-radius: radius(circle);
    }

    &:after {
      background: color(primary, default);
    }
  }

  &.pretty-check--error {
    input + label {
      color: color(error);
      
      &:before {
        border-color: color(error);
      }
    }
  }
}